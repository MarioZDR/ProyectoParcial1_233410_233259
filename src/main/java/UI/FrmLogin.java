/*
 * FrmLogin.java creada el 20/02/2023.
 */
package UI;

import dominio.Cliente;
import dominio.Usuario;
import excepciones.PasswordIncorrectaException;
import excepciones.PersistenciaException;
import implementaciones.ClientesDAO;
import interfaces.IClientesDAO;
import interfaces.ICuentasDAO;
import interfaces.IDireccionesDAO;
import interfaces.ITransaccionesDAO;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import validadores.Validador;

/**
 * Este frame se utiliza para el inicio de sesión.
 *
 * @author 00000233259 y 00000233410.
 */
public class FrmLogin extends javax.swing.JFrame {

    /**
     * Este atributo se utiliza para llevar un registro cronológicamente de los
     * datos.
     */
    private static final Logger LOG = Logger.getLogger(ClientesDAO.class.getName());
    /**
     * Este atributo representa la DAO de Clientes.
     */
    public final IClientesDAO clientesDAO;
    /**
     * Este atributo representa la DAO de Direcciones.
     */
    public final IDireccionesDAO direccionesDAO;
    /**
     * Este atributo representa la DAO de Transacciones.
     */
    public final ITransaccionesDAO transaccionesDAO;
    /**
     * Este atributo representa la DAO de Cuentas.
     */
    public final ICuentasDAO cuentasDAO;
    /**
     * Este atributo representa el validador de campos.
     */
    private final Validador validador;
    /**
     * Este atributo representa el usuario logeado actualmente.
     */
    private Usuario usuarioActual;

    /**
     * Método constructor que inicializa los atributos al valor de sus
     * parámetros.
     *
     * @param clientesDAO representa la DAO de Clientes.
     * @param direccionesDAO representa la DAO de Direcciones.
     * @param transaccionesDAO representa la DAO de Transacciones.
     * @param cuentasDAO representa la DAO de Cuentas.
     */
    public FrmLogin(IClientesDAO clientesDAO, IDireccionesDAO direccionesDAO, ITransaccionesDAO transaccionesDAO, ICuentasDAO cuentasDAO) {
        this.clientesDAO = clientesDAO;
        this.direccionesDAO = direccionesDAO;
        this.transaccionesDAO = transaccionesDAO;
        this.cuentasDAO = cuentasDAO;
        this.validador = new Validador();
        this.usuarioActual = new Usuario(null);
        initComponents();
        this.setSize(460, 370);
        this.setResizable(false);
        this.setLocationRelativeTo(null);
    }

    /**
     * Este método realiza la extracción de datos de la interfaz de usuario.
     *
     * @return Regresa los datos extraidos.
     * @throws PersistenciaException Se lanza en caso de ocurrir un error en la
     * capa de persistencia.
     */
    private Cliente extraerDatos() throws PersistenciaException {
        String cadenaID = txtID.getText();
        if (validador.validarID(cadenaID)) {
            int ID = Integer.parseInt(cadenaID);
            String password = txtPassword.getText();
            Cliente cliente = new Cliente(ID, password);
            return cliente;
        } else {
            throw new PersistenciaException("Ingrese un ID");
        }
    }

    /**
     * Este método realiza el proceso de inicio de sesión y las validaciones
     * correspondientes.
     *
     * @return Regresa true si se pudo realizar correctamente, false en caso
     * contrario.
     * @throws PersistenciaException Se lanza en caso de ocurrir un error en la
     * capa de persistencia.
     * @throws PasswordIncorrectaException Se lanza en caso de que la
     * contraseña sea incorrecta.
     */
    private boolean validarInicio() throws PersistenciaException, PasswordIncorrectaException {
        Cliente clienteExtraido = extraerDatos();
        Cliente clienteGuardado = clientesDAO.consultarCredenciales(clienteExtraido.getId());
        if (clienteGuardado != null) {
            if (clienteGuardado.getPassword().equals(clienteExtraido.getPassword())) {
                usuarioActual = new Usuario(clientesDAO.consultar(clienteExtraido.getId()));
                mostrarMensajeCliente("Has iniciado sesión");
                return true;
            } else {
                throw new PasswordIncorrectaException("Contraseña incorrecta");
            }
        } else {
            throw new PersistenciaException("El usuario no existe");
        }
    }

    /**
     * Este método muestra un mensaje en un JOptionPane.
     *
     * @param msj El mensaje a mostrar.
     */
    private void mostrarMensajeCliente(String mensaje) {
        JOptionPane.showMessageDialog(null, mensaje, "Info", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpnFondo = new javax.swing.JPanel();
        lblBienvenido = new javax.swing.JLabel();
        lblRegistrarse = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        btnIniciarSesion = new javax.swing.JButton();
        lblContrasenia = new javax.swing.JLabel();
        lblID = new javax.swing.JLabel();
        lblRetiroSinCuenta = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        lblBanco1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jpnFondo.setBackground(new java.awt.Color(12, 28, 68));
        jpnFondo.setForeground(new java.awt.Color(12, 28, 68));
        jpnFondo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblBienvenido.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 50)); // NOI18N
        lblBienvenido.setForeground(new java.awt.Color(255, 255, 255));
        lblBienvenido.setText("Bienvenido");
        jpnFondo.add(lblBienvenido, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        lblRegistrarse.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        lblRegistrarse.setForeground(new java.awt.Color(255, 255, 255));
        lblRegistrarse.setText("Registrarse");
        lblRegistrarse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblRegistrarseMouseClicked(evt);
            }
        });
        jpnFondo.add(lblRegistrarse, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 310, -1, -1));

        txtID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDActionPerformed(evt);
            }
        });
        txtID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIDKeyTyped(evt);
            }
        });
        jpnFondo.add(txtID, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, 370, 50));

        btnIniciarSesion.setBackground(new java.awt.Color(65, 103, 158));
        btnIniciarSesion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnIniciarSesion.setForeground(new java.awt.Color(255, 255, 255));
        btnIniciarSesion.setText("Iniciar Sesión");
        btnIniciarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarSesionActionPerformed(evt);
            }
        });
        jpnFondo.add(btnIniciarSesion, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, -1, -1));

        lblContrasenia.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        lblContrasenia.setForeground(new java.awt.Color(255, 255, 255));
        lblContrasenia.setText("Contraseña");
        jpnFondo.add(lblContrasenia, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, -1, -1));

        lblID.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        lblID.setForeground(new java.awt.Color(255, 255, 255));
        lblID.setText("ID");
        jpnFondo.add(lblID, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, -1, -1));

        lblRetiroSinCuenta.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        lblRetiroSinCuenta.setForeground(new java.awt.Color(255, 255, 255));
        lblRetiroSinCuenta.setText("Retiro Sin Cuenta");
        lblRetiroSinCuenta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblRetiroSinCuentaMouseClicked(evt);
            }
        });
        jpnFondo.add(lblRetiroSinCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 310, -1, -1));
        jpnFondo.add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 220, 370, 50));

        lblBanco1.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        lblBanco1.setForeground(new java.awt.Color(255, 255, 255));
        lblBanco1.setText("banKcat");
        jpnFondo.add(lblBanco1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 80, 110, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpnFondo, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpnFondo, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Este evento ocurre cuando un usuario da un click en el botón y se abre el
     * frame destinado para realizar un registro.
     *
     * @param evt Evento al dar click en el botón.
     */
    private void lblRegistrarseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRegistrarseMouseClicked
        frmRegistro frm = new frmRegistro(clientesDAO, direccionesDAO, transaccionesDAO, cuentasDAO);
        this.setVisible(false);
        frm.setVisible(true);
    }//GEN-LAST:event_lblRegistrarseMouseClicked
    /**
     * Este evento ocurre cuando un usuario da un click en el botón y se llama
     * al método que inicia sesión.
     *
     * @param evt Evento al dar click en el botón.
     */
    private void btnIniciarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarSesionActionPerformed
        try {
            if (validarInicio()) {
                FrmMenu frmMenu = new FrmMenu(clientesDAO, direccionesDAO, transaccionesDAO, cuentasDAO, usuarioActual);
                this.setVisible(false);
                frmMenu.setVisible(true);
            } else {
                this.mostrarMensajeCliente("No se ha podido iniciar sesión");
            }
        } catch (PersistenciaException ex) {
            Logger.getLogger(FrmLogin.class.getName()).log(Level.INFO, null, ex);
            this.mostrarMensajeCliente(ex.getMessage());
        } catch (PasswordIncorrectaException ex) {
            Logger.getLogger(FrmLogin.class.getName()).log(Level.INFO, null, ex);
            this.mostrarMensajeCliente(ex.getMessage());
        }
    }//GEN-LAST:event_btnIniciarSesionActionPerformed
    /**
     * Este método realiza la validación que solo pueda introducir números y con
     * una longitud de 10.
     *
     * @param evt Al presionar una tecla en el campo de texto
     */
    private void txtIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIDKeyTyped
        int tecla = evt.getKeyChar();
        boolean numeros = tecla >= 48 && tecla <= 57;
        if (!numeros) {
            evt.consume();
        }
        if (txtID.getText().trim().length() == 10) {
            evt.consume();
        }
    }//GEN-LAST:event_txtIDKeyTyped
    /**
     * Este evento ocurre cuando un usuario da un click en el botón y se abre el
     * frame destinado para realizar un retiro sin cuenta.
     *
     * @param evt Evento al dar click en el botón.
     */
    private void lblRetiroSinCuentaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRetiroSinCuentaMouseClicked
        FrmRetirarSinCuenta frmRetirarSinCuenta = new FrmRetirarSinCuenta(clientesDAO, direccionesDAO, transaccionesDAO, cuentasDAO);
        this.setVisible(false);
        frmRetirarSinCuenta.setVisible(true);
    }//GEN-LAST:event_lblRetiroSinCuentaMouseClicked

    private void txtIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDActionPerformed

    }//GEN-LAST:event_txtIDActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIniciarSesion;
    private javax.swing.JPanel jpnFondo;
    private javax.swing.JLabel lblBanco1;
    private javax.swing.JLabel lblBienvenido;
    private javax.swing.JLabel lblContrasenia;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblRegistrarse;
    private javax.swing.JLabel lblRetiroSinCuenta;
    private javax.swing.JTextField txtID;
    private javax.swing.JPasswordField txtPassword;
    // End of variables declaration//GEN-END:variables
}
