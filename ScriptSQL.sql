CREATE DATABASE bancoProyectoUno;
USE bancoProyectoUno;
CREATE TABLE DIRECCIONES(
    Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    numero VARCHAR(15) NOT NULL,
    calle VARCHAR(25) NOT NULL,
    colonia VARCHAR(25) NOT NULL
);
CREATE TABLE CLIENTES(
    Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    fecha_nacimiento DATE NOT NULL,
    nombres VARCHAR(50) NOT NULL,
    apellido_paterno VARCHAR(40) NOT NULL,
    apellido_materno VARCHAR(40) NOT NULL,
    id_direccion INT NOT NULL,
    password blob NOT NULL,
    edad int,
    FOREIGN KEY(id_direccion) REFERENCES DIRECCIONES(Id)
);    
CREATE TABLE CUENTAS(
    num_cuenta INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    fecha_apertura DATE DEFAULT(CURRENT_DATE),
    nombre_cuenta VARCHAR(15) DEFAULT "Principal",
    saldo FLOAT DEFAULT 500,
    id_cliente INT NOT NULL,
    estado ENUM("Activo","Cancelado") DEFAULT "Activo",
    FOREIGN KEY(id_cliente) REFERENCES CLIENTES(Id)
);
CREATE TABLE TRANSACCIONES(
   Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
   monto FLOAT NOT NULL,
   fecha DATETIME DEFAULT NOW(),
   id_cuenta_origen INT NOT NULL,
   id_cuenta_destino INT NOT NULL,
   FOREIGN KEY(id_cuenta_origen) REFERENCES CUENTAS(num_cuenta),
   FOREIGN KEY(id_cuenta_destino) REFERENCES CUENTAS(num_cuenta)
);

CREATE TABLE TRANSACCIONES_SIN_CUENTA(
   Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
   monto FLOAT NOT NULL,
   estado ENUM("Activo","Cobrado","No Cobrado") DEFAULT "Activo",
   fecha DATETIME DEFAULT NOW(),
   folio VARCHAR(100) NOT NULL UNIQUE,
   password VARCHAR(8) NOT NULL,
   id_cuenta_retiro INT NOT NULL,
   FOREIGN KEY(id_cuenta_retiro) REFERENCES CUENTAS(num_cuenta)
);

DELIMITER $$
CREATE TRIGGER generacion_edad
BEFORE INSERT
ON CLIENTES FOR EACH ROW
BEGIN
SET NEW.edad = timestampdiff(YEAR, new.fecha_nacimiento, CURRENT_DATE);
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER crearCuenta
AFTER INSERT
ON CLIENTES FOR EACH ROW
BEGIN
INSERT INTO cuentas (id_cliente,fecha_apertura) values(new.id,current_date());
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE transaccion(in cuenta1 int,in cuenta2 int, in monto float,inout valor int)
BEGIN
DECLARE montoInicial float DEFAULT 0;
SET montoInicial = (SELECT SALDO FROM CUENTAS WHERE NUM_CUENTA = CUENTA1);
START TRANSACTION;
UPDATE cuentas set saldo = saldo-monto WHERE num_cuenta=cuenta1;
UPDATE cuentas set saldo = saldo+monto WHERE num_cuenta=cuenta2;
IF((SELECT SALDO FROM CUENTAS WHERE NUM_CUENTA = CUENTA1)+MONTO >= MONTO AND 
montoInicial=(SELECT SALDO FROM CUENTAS WHERE NUM_CUENTA = CUENTA1)+MONTO) THEN
INSERT INTO TRANSACCIONES(MONTO,ID_CUENTA_ORIGEN,ID_CUENTA_DESTINO)VALUES(MONTO,CUENTA1, CUENTA2);
set valor=1;
COMMIT;
ELSE
set valor=0;
ROLLBACK;
END IF;
END $$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER actualizar_edad
BEFORE UPDATE
ON CLIENTES FOR EACH ROW
BEGIN
SET NEW.edad = timestampdiff(YEAR, new.fecha_nacimiento, CURRENT_DATE);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE consultarRetirosPorCuenta(in idcuenta int, in fechainicio date, in fechafin date, in elementosPorPagina int, in elementosASaltar int)
BEGIN
SELECT * FROM TRANSACCIONES_SIN_CUENTA INNER JOIN CUENTAS ON CUENTAS.NUM_CUENTA = TRANSACCIONES_SIN_CUENTA.ID_CUENTA_RETIRO
WHERE TRANSACCIONES_SIN_CUENTA.ID_CUENTA_RETIRO = idcuenta AND DATE(TRANSACCIONES_SIN_CUENTA.FECHA) >= DATE(FECHAINICIO) AND
DATE(TRANSACCIONES_SIN_CUENTA.FECHA)<=FECHAFIN LIMIT elementosPorPagina OFFSET elementosASaltar;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE consultarTransaccionesPorCuentaRecibidas(in idcuenta int, in fechainicio date, in fechafin date, in elementosPorPagina int, in elementosASaltar int)
BEGIN
SELECT * FROM TRANSACCIONES INNER JOIN CUENTAS ON CUENTAS.NUM_CUENTA = TRANSACCIONES.ID_CUENTA_DESTINO
WHERE TRANSACCIONES.ID_CUENTA_DESTINO= idcuenta AND DATE(TRANSACCIONES.FECHA) >= DATE(FECHAINICIO) AND
DATE(TRANSACCIONES.FECHA)<=FECHAFIN LIMIT elementosPorPagina OFFSET elementosASaltar;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE consultarTransaccionesPorCuentaRealizadas(in idcuenta int, in fechainicio date, in fechafin date, in elementosPorPagina int, in elementosASaltar int)
BEGIN
SELECT * FROM TRANSACCIONES INNER JOIN CUENTAS ON CUENTAS.NUM_CUENTA = TRANSACCIONES.ID_CUENTA_ORIGEN
WHERE TRANSACCIONES.ID_CUENTA_ORIGEN= idcuenta AND DATE(TRANSACCIONES.FECHA) >= DATE(FECHAINICIO) AND
DATE(TRANSACCIONES.FECHA)<=FECHAFIN LIMIT elementosPorPagina OFFSET elementosASaltar;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE consultarUltimoRetiro(in idcliente int)
BEGIN
SELECT RETIRO.* FROM TRANSACCIONES_SIN_CUENTA AS RETIRO INNER JOIN CUENTAS ON 
CUENTAS.NUM_CUENTA = RETIRO.ID_CUENTA_RETIRO INNER JOIN CLIENTES ON CLIENTES.ID = 
CUENTAS.ID_CLIENTE WHERE CLIENTES.ID = idcliente AND RETIRO.ESTADO = 'Activo' 
ORDER BY RETIRO.FECHA DESC LIMIT 1;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE retiro(in cuenta int, in cantidadRetiro float,in folioRetiro varchar(10),in passwordRetiro varchar(8),inout resultado int)
BEGIN
DECLARE montoInicial float DEFAULT 0;
SET montoInicial = (SELECT SALDO FROM CUENTAS WHERE NUM_CUENTA = CUENTA);
CALL actualizarRegistro(folioRetiro, passwordRetiro);
START TRANSACTION;
UPDATE TRANSACCIONES_SIN_CUENTA SET MONTO = CANTIDADRETIRO WHERE FOLIO = folioRetiro AND PASSWORD = passwordRetiro;
UPDATE CUENTAS SET SALDO = SALDO - CANTIDADRETIRO WHERE NUM_CUENTA = CUENTA;
IF(montoInicial=(SELECT SALDO FROM CUENTAS WHERE NUM_CUENTA = CUENTA)+CANTIDADRETIRO) AND
(SELECT ESTADO FROM TRANSACCIONES_SIN_CUENTA WHERE FOLIO = folioRetiro AND PASSWORD = passwordRetiro) = "Activo" AND
(SELECT SALDO FROM CUENTAS WHERE NUM_CUENTA = CUENTA) >= 0 THEN
set resultado=1;
UPDATE TRANSACCIONES_SIN_CUENTA SET ESTADO = "Cobrado" WHERE FOLIO = folioRetiro AND PASSWORD = passwordRetiro;
COMMIT;
ELSE
set resultado=0;
ROLLBACK;
END IF;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE actualizarRegistro(in folioActualizar varchar(10), in passwordActualizar varchar(8))
BEGIN
IF(TIMESTAMPDIFF(MINUTE,(SELECT FECHA FROM TRANSACCIONES_SIN_CUENTA WHERE FOLIO = folioActualizar AND PASSWORD = passwordActualizar),NOW())>=10) THEN
UPDATE TRANSACCIONES_SIN_CUENTA SET ESTADO = "No Cobrado" WHERE FOLIO = folioActualizar AND PASSWORD = passwordActualizar;
END IF;
END $$
DELIMITER ;
